import os

def is_label_invalid(label_path):
    """
    Ki·ªÉm tra xem file label c√≥ h·ª£p l·ªá kh√¥ng.
    """
    try:
        with open(label_path, 'r') as f:
            lines = f.readlines()

        # Ki·ªÉm tra file r·ªóng
        if not lines:
            return True

        for line in lines:
            parts = line.strip().split()

            # Ki·ªÉm tra ƒë·ªãnh d·∫°ng: √≠t nh·∫•t ph·∫£i c√≥ 5 ph·∫ßn t·ª≠ (emotion_class, x, y, w, h)
            if len(parts) < 5:
                return True

            # Ki·ªÉm tra gi√° tr·ªã bounding box n·∫±m trong kho·∫£ng h·ª£p l·ªá [0,1]
            _, x_center, y_center, width, height = map(float, parts[:5])
            if not (0 <= x_center <= 1 and 0 <= y_center <= 1 and 0 < width <= 1 and 0 < height <= 1):
                return True

    except Exception as e:
        print(f"L·ªói khi ƒë·ªçc file {label_path}: {e}")
        return True  # N·∫øu c√≥ l·ªói ƒë·ªçc file, coi nh∆∞ file b·ªã h·ªèng

    return False

def delete_invalid_files():
    """
    X√≥a c√°c file ·∫£nh v√† nh√£n n·∫øu nh√£n b·ªã l·ªói.
    """
    input_dir = "Data/YOLO_format/train"
    images_dir = os.path.join(input_dir, "images")
    labels_dir = os.path.join(input_dir, "labels")

    if not os.path.exists(images_dir) or not os.path.exists(labels_dir):
        print("‚ùå Th∆∞ m·ª•c images ho·∫∑c labels kh√¥ng t·ªìn t·∫°i!")
        return

    image_files = [f for f in os.listdir(images_dir) if f.lower().endswith(('.png', '.jpg', '.jpeg'))]
    
    deleted_count = 0
    for image_file in image_files:
        image_path = os.path.join(images_dir, image_file)
        label_file = os.path.splitext(image_file)[0] + ".txt"
        label_path = os.path.join(labels_dir, label_file)

        if os.path.exists(label_path) and is_label_invalid(label_path):
            try:
                os.remove(image_path)  # X√≥a ·∫£nh
                os.remove(label_path)  # X√≥a file nh√£n
                deleted_count += 1
                print(f"üóëÔ∏è ƒê√£ x√≥a: {image_path} & {label_path}")
            except Exception as e:
                print(f"‚ùå L·ªói khi x√≥a {image_path} ho·∫∑c {label_path}: {e}")

    print(f"\n‚úÖ ƒê√£ x√≥a {deleted_count} file ·∫£nh v√† nh√£n kh√¥ng h·ª£p l·ªá.")

if __name__ == "__main__":
    delete_invalid_files()
